package ProducerAndConsumerModel;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingDeque;/** * Created with IntelliJ IDEA. * Project: test-jar * Author: Kevin * Date: 2019/3/5 * Time: 5:44 PM */public class BlockQueueModel implements Model{	private final BlockingQueue<Task> queue;	private volatile int increTaskNo = 0;	public BlockQueueModel(int size) {		this.queue = new LinkedBlockingDeque<>(size);	}	@Override	public Runnable newRunnableConsumer() {		return new ConsumerImpl();	}	@Override	public Runnable newRunnableProducer() {		return new ProducerImpl();	}	private class ConsumerImpl extends AbstractConsumer {		@Override		public void consume() throws InterruptedException {			Task task = queue.take();			// 固定时间范围的消费，模拟相对稳定的服务器处理过程			Thread.sleep(500 + (long) (Math.random() * 500));			System.out.println("consume " + Thread.currentThread().getName() + " : " + task.no);		}	}	private class ProducerImpl extends AbstarchProducer {		@Override		public void produce() throws InterruptedException {			Thread.sleep((long) (Math.random() * 1000));			Task task = new Task(increTaskNo++);			queue.put(task);			System.out.println("produce " + Thread.currentThread().getName() + " : " + task.no);		}	}	public static void main(String[] args) {		BlockQueueModel blockQueueModel = new BlockQueueModel(3);		for (int i = 0; i < 2; i++) {			new Thread(blockQueueModel.newRunnableConsumer()).start();		}		for (int i = 0; i < 5; i++) {			new Thread(blockQueueModel.newRunnableProducer()).start();		}	}}