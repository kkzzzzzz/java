package algorithm;import java.util.ArrayList;import java.util.List;/** * Created with IntelliJ IDEA. * Project: test-jar * Author: kevin.zhu * Date: 2020/9/17 * Time: 11:45 上午 */public class DPPerfectSquares {	public static int numSquares(int n) {		List<Integer> squareList = generateSquareList(n);		int[] dp = new int[n + 1];		for(int i=1; i <=n; i++){			int min = Integer.MAX_VALUE;			for(int square : squareList){				if(square > i)					break;				//按爬梯子来理解 每个square 与 i- square的差值 都能组成i 也就是i-square的个数再加上square的个数 也就是dp[i -square] + 1				min = Math.min(min, dp[i - square] + 1);			}			dp[i] = min;		}		return dp[n];	}	private static List<Integer> generateSquareList(int n) {		List<Integer> squareList = new ArrayList<>();		int diff = 3;		int square = 1;		while (square <= n) {			squareList.add(square);			square += diff;			diff += 2;		}		return squareList;	}	public static void main(String[] args) {		System.out.println(numSquares(10));	}}