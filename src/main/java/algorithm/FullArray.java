package algorithm;import java.util.ArrayList;import java.util.List;/** * Created with IntelliJ IDEA. * Project: test-jar * Author: Kevin * Date: 2020/1/16 * Time: 11:42 上午 */public class FullArray {	private static void fullArray(List<Integer> array, int start, int end){		if (start == end - 1) {			System.out.println(array.toString());			return;		}		for (int swapIndex = start; swapIndex < array.size(); swapIndex++) {//			if (!swapAccepted(array, start, swapIndex)) {//				continue;//			}			swap(array, start, swapIndex);			fullArray(array, start + 1, end);			swap(array, start, swapIndex);		}	}	private static boolean swapAccepted(List<Integer> array, int start, int i) {		for(int j = start; j<i; j++){			if(array.get(j) == array.get(i)){				return false;			}		}		return true;	}	private static void swap(List<Integer> array, int start, int i) {		if(start == i){			return;		}		int tmp = array.get(start);		array.set(start, array.get(i));		array.set(i, tmp);	}	public static void main(String[] args) {		ArrayList<Integer> integers = new ArrayList<>();		integers.add(1);		integers.add(4);		integers.add(3);		integers.add(2);		fullArray(integers, 0, integers.size());//		orderArray(integers);	}	private static void orderArray(ArrayList<Integer> array) {		array.sort((o1, o2) -> o1 > o2 ? 1 : -1);		System.out.println(array.toString());		do {			nextArray(array);			System.out.println(array.toString());		} while (!isLast(array));	}	private static boolean isLast(ArrayList<Integer> array) {		for (int i = 1; i < array.size(); i++) {			if (array.get(i - 1) < array.get(i)) {				return false;			}		}		return true;	}	private static void nextArray(ArrayList<Integer> array) {		int cursor = 0;		for(int j = array.size()-1; j>1 ; j--) {			if(array.get(j-1)<array.get(j)) {				cursor = j-1;				break;			}		}		int biggerCursor = cursor + 1;		for (int i = cursor + 1; i < array.size(); i++) {			if (array.get(i) > array.get(cursor) && array.get(i) <= array.get(biggerCursor)) {				biggerCursor = i;			}		}		swap(array,cursor,biggerCursor);		reverse(array,cursor);	}	private static void reverse(ArrayList<Integer> array, int cursor) {		for (int i = cursor + 1, j = array.size() - 1; i < j; i++, j--) {			swap(array, i, j);		}	}}